//////////// Настройка точек
void Dots(bool Dot_On) {
  for (int i = 0; i < DOTS_NUM; i++) {
    leds[(LEDS_IN_SEGMENT * 14) + i] = (Dot_On) ? ledColor : CRGB(0, 0, 0);
  }
}

//////////// Настройка символов
uint8_t digits[] = {
  // определяем символы для отображения
  // код начинается с 0b0, далее идут 7 цифр, каждая цифра это номер фрагмента, 1 - включен, 0- отключен
  // далее указан получающийся символ и порядковый номер в массиве
  0b00111111,                       // Символ 0          0
  0b00100001,                       // Символ 1          1
  0b01110110,                       // Символ 2          2
  0b01110011,                       // Символ 3          3
  0b01101001,                       // Символ 4          4
  0b01011011,                       // Символ 5          5
  0b01011111,                       // Символ 6          6
  0b00110001,                       // Символ 7          7
  0b01111111,                       // Символ 8          8
  0b01111011,                       // Символ 9          9
  0b01111000,                       // Символ * градус  10
  0b00011110,                       // Символ C         11
  0b00000000,                       // Без символа      12
  0b01000000,                       // Символ -         13
  0b01111100,                       // Символ P         14
  0b01111000,                       // Символ % из двух частей 15
  0b01000111                        // Символ % из двух частей 16
};
/////////////////////////////////////////////
void Digit(uint8_t digit, uint8_t cursor) {  // функция отображения символов
  for (uint8_t mask = 0b01000000; mask > 0; mask = mask >> 1) {
    for (uint8_t i = 0; i < LEDS_IN_SEGMENT; i++) {
      if (clck.new_god) {
        leds[cursor] = (digit & mask) ? ColorTable[rand() % NUM_COLORS - 1] : CRGB(0, 0, 0);
      } else {
        leds[cursor] = (digit & mask) ? ledColor : CRGB(0, 0, 0);
      }
      cursor++;
    }
  }
}
